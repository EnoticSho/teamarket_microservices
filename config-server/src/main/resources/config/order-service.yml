server:
  port: 8991
  servlet:
    context-path: /order

spring:
  application:
    name: order-service
  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    driver-class-name: org.postgresql.Driver
    password: root
    username: root
    url: jdbc:postgresql://localhost:5432/database
  kafka:
    bootstrap-servers: http://localhost:9092
    template:
      default-topic: notificationTopic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping:
                event:com.example.teamarket.order.dto.response.OrderInfoDto,
                paymentRequestTopic:com.example.teamarket.order.dto.request.payment.PaymentRequest
    consumer:
      group-id: orderId
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            type:
              mapping: paymentInfoTopic:com.example.teamarket.order.dto.response.PaymentInfoDto

integrations:
  user-service:
    url: http://localhost:8980/auth
    read-timeout: 10000
    write-timeout: 5000
    connect-timeout: 5000
  cart-service:
    url: http://localhost:8090/cart
    read-timeout: 10000
    write-timeout: 5000
    connect-timeout: 5000


eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

management:
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans

---

spring:
  config:
    activate:
      on-profile: docker

  datasource:
    driver-class-name: org.postgresql.Driver
    password: root
    username: root
    url: jdbc:postgresql://postgres:5432/database
  kafka:
    bootstrap-servers: http://broker:9092
    template:
      default-topic: notificationTopic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping:
                event:com.example.teamarket.order.dto.response.OrderInfoDto,
                paymentRequestTopic:com.example.teamarket.order.dto.request.payment.PaymentRequest
    consumer:
      group-id: orderId
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            type:
              mapping: paymentInfoTopic:com.example.teamarket.order.dto.response.PaymentInfoDto


integrations:
  user-service:
    url: http://auth-service:8980/auth
    read-timeout: 10000
    write-timeout: 5000
    connect-timeout: 5000
  cart-service:
    url: http://cart-service:8090/cart
    read-timeout: 10000
    write-timeout: 5000
    connect-timeout: 5000


eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-service:8761/eureka/

management:
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://zipkin:9411/api/v2/spans
